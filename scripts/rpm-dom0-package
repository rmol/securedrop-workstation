#!/bin/bash
#
#
# Builds RPM for dom0 bootstrap logic
# $1 - Digest Hash of base docker container to use

set -u
set -e

export TAG="${1}"
export LOCAL_IMG="fpf.local/rpmbuilder:${1}"
export ROOT_DIR="$(git rev-parse --show-toplevel)"
export USER_RPMDIR="/home/user/rpmbuild"


function build_local_base {
    # Build a local revision of quay.io/freedomofpress/rpmbuilder. Needed to pass UIDs without
    # doing privilege escalation hoops at run-time
    docker build --build-arg="RPM_HASH=${TAG}" \
                 --build-arg=USERID="$(id -u)" \
                 -t "${LOCAL_IMG}" \
                 -f scripts/rpmbuilder.Dockerfile scripts/ 2>&1 1> /dev/null
}

function docker_cmd_wrapper() {
    docker run -it --rm \
               -v "${ROOT_DIR}:/sd" \
               -v "${ROOT_DIR}/rpm-build:${USER_RPMDIR}" \
               "${LOCAL_IMG}" \
               $@
}



build_local_base

docker_cmd_wrapper /usr/bin/python3 setup.py sdist

# Remove any cached tarballs. We must do this because the container image config
# needlessly marks the rpmbuild dir as a volume. If we don't remove tarballs
# before building, the subsequent cp command will fail.
docker_cmd_wrapper find "${USER_RPMDIR}" -type f -iname '*.tar.gz' -delete

# The tarball will exist in the /sd workdir, copy it to the RPM build dir.
docker_cmd_wrapper find /sd -type f -iname '*.tar.gz' -exec cp -u -t "${USER_RPMDIR}/SOURCES/" {} +

docker_cmd_wrapper rpmbuild -ba "${USER_RPMDIR}/SPECS/securedrop-workstation.spec"

local_rpms="$(find rpm-build/ -type f -iname '*.rpm')"

printf "\nRPM packages can be found at:\n\n%s\n" "$local_rpms"
